#!/usr/bin/env php
<?php

const ORM_TABLES_PRIORITY = ["orm_users", "orm_events"];


require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../engine/load_env.php';
$sqliteFile = "db_production.sqlite";
file_exists(DBFactory::getSqliteLocation($sqliteFile)) && unlink(DBFactory::getSqliteLocation($sqliteFile));
$sqlite = DBFactory::sqlite($sqliteFile);

$db = new DB($sqlite);
if (!SeedingService::applyMigrations($db))
    Cli::abort("There was a problem applying migrations");
echo Cli::ok("Migrations applied");

$mySqlDump = DBFactory::getSqliteLocation("dump.sql");
if (!file_exists($mySqlDump)) {
    Cli::abort("SQL dump file not found");
}

$sql = str_replace("\'", "''", file_get_contents($mySqlDump));

$insertStatements = preg_split('/;\s*(?=INSERT INTO)/i', $sql);
$insertArray = [];
$tableNameRegex = '/INSERT INTO\s+`?(\w+)`?\s+/i';

foreach ($insertStatements as $statement) {
    if (preg_match($tableNameRegex, $statement, $matches)) {
        $tableName = $matches[1];
        $insertArray[$tableName] = $statement;
    }
}

echo "Starting import of dump..." . PHP_EOL;
echo "Dump loaded" . PHP_EOL;
try {
    $sqlite->beginTransaction();
    // first import things that would FK CONTRAINT
    foreach (ORM_TABLES_PRIORITY as $table) {
        $sqlite->executeQuery($insertArray[$table]);
        unset($insertArray[$table]);
        echo "- Imported $table" . PHP_EOL;
    }
    // Then import the rest
    foreach ($insertArray as $table => $insert) {
        $sqlite->executeQuery($insert);
        echo "- Imported $table" . PHP_EOL;
    }
    $sqlite->commit();
} catch (Exception $e) {
    // Rollback the transaction if an error occurs
    $sqlite->rollBack();
    Cli::abort("Transaction rolled back: " . $e->getMessage());
}
echo Cli::ok("SQLite generated into $sqliteFile");
Cli::success();